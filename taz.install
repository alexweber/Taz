<?php
/**
 * @file
 * Taz profile installation hooks.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function taz_install() {
  // Perform setup tasks.
  taz_set_blocks();
  taz_set_content_types();
  taz_set_tags();
  taz_set_fields();
  taz_set_roles();
  taz_set_default_text_formats_and_perms();
  taz_set_wysiwyg();
  taz_set_backup_migrate();
  taz_set_menu();
  taz_set_contexts();

  // Set the default and admin themes
  variable_set('theme_default', 'bartik');
  variable_set('admin_theme', 'fubik');
  variable_set('node_admin_theme', 1);
  theme_enable(array('bartik', 'fubik'));

  // Set up date defaults so it doesn't yell at us anymore.
  variable_set('date_first_day', 1);
  variable_set('date_format_long', 'l, F j, Y - H:i');
  variable_set('date_format_medium', 'D, Y-m-d H:i');
  variable_set('date_format_short', 'Y-m-d H:i');
  variable_set('date_default_timezone', 'America/Denver');
  variable_set('configurable_timezones', 0);

  // Set private file path.
  variable_set('file_private_path', 'private');

  // Set media browser settings.
  variable_set('media__wysiwyg_browser_plugins ', array(
    'upload' => 'upload',
    'media_default--media_browser_1' => 'media_default--media_browser_1',
    'media_default--media_browser_my_files' => 'media_default--media_browser_my_files',
    'library' => 0,
  ));

  // Enable transliteration.
  variable_set('pathauto_transliterate', 1);
  variable_set('transliteration_file_uploads', 1);
  variable_set('transliteration_file_lowercase', 1);

  // Set Pathauto default node pattern.
  variable_set('pathauto_node_pattern', 'node/[node:nid]');
  variable_set('pathauto_node_page_pattern', '[node:title]');

  // Set sensible caching defaults.
  variable_set('cache', 1);
  variable_set('block_cache', 1);
  variable_set('cache_lifetime', 600);
  variable_set('page_compression', 1);

  // Don't allow visitor accounts.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
  // When cancelling a user account, block it and unpublish it's content.
  variable_set('user_cancel_method', 'user_cancel_block_unpublish');

  // Display all errors.
  variable_set('error_level', 2);

  // Enable backtrace error handler.
  // UPDATE: When running strict mode this can break some AJAX because of
  // the backtrace markup being mixed with responses.
//  variable_set('devel_error_handlers', array(1 => 1, 4 => 4));

  // Cache Admin menu.
  variable_set('admin_menu_cache_client', 1);

  // Use easing with iToggle.
  variable_set('itoggle_easing_use', 1);

  // Module filter dynamic button placement.
  variable_set('module_filter_dynamic_save_position', 1);

  // Display Suite extras settings.
  variable_set('ds_extras_field_template', 1);
  variable_set('ft-default', 'theme_ds_field_minimal');
  variable_set('ds_extras_fields_extra', 1);
  variable_set('ds_extras_contextual', 1);

  // Views UI development settings.
  variable_set('views_ui_show_listing_filters', 1);
  variable_set('views_ui_show_advanced_help_warning', 0);
  variable_set('views_ui_show_advanced_column', 1);
  variable_set('views_ui_show_sql_query', 1);

  // Enable Apps Dev console.
  variable_set('apps_enable_dev_console', 1);
}

/**
 * Setup default blocks.
 */
function taz_set_blocks() {
  // Enable some standard blocks.
  $default_theme = 'bartik';
  $admin_theme = 'fubik';
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'navigation',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}

/**
 * Set default content types.
 */
function taz_set_content_types() {
  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'rdftype' => array('sioc:Item', 'foaf:Document'),
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" settings.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);
  variable_set('node_submitted_page', FALSE);

  // Default "Article" settings.
  variable_set('menu_options_article', array());
}

/**
 * Setup default taxonomy vocabulary and fields.
 */
function taz_set_tags() {
  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
      'name' => 'Tags',
      'description' => $description,
      'machine_name' => 'tags',
      'help' => $help,
  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => $vocabulary->name,
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);
}

/**
 * Setup default fields for content types.
 */
function taz_set_fields() {
  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,
    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),
    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);
}

/**
 * Provides a default administrator role with all permissions
 */
function taz_set_roles() {
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

/**
 * Provides default text formats.
 */
function taz_set_default_text_formats_and_perms() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => -1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => -10,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <p>',
          'filter_html_help' => 0,
        ),
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
      // Media filter.
      'media_filter' => array(
        'weight' => 2,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  // Don't allow anonymous user to use Filtered HTML.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => -2,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => -10,
        'status' => 0,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
      // Media filter.
      'media_filter' => array(
        'weight' => 2,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  $full_html_permission = filter_permission_name($full_html_format);
  // Only admin can use Full HTML.
  user_role_grant_permissions(TAZ_ADMIN_RID, array('access content', $full_html_permission));

  $raw_html_format = array(
    'format' => 'raw_html',
    'name' => 'Raw HTML',
    'weight' => 1,
    'filters' => array(),
  );
  $raw_html_format = (object) $raw_html_format;
  filter_format_save($raw_html_format);

  $raw_html_permission = filter_permission_name($raw_html_format);
  // Only admin can use Full HTML.
  user_role_grant_permissions(TAZ_ADMIN_RID, array('access content', $raw_html_permission));
}

/**
 * Sets default WYSIWYG settings for Taz.
 */
function taz_set_wysiwyg() {
  $settings_full = array(
    'default' => 1,
    'user_choose' => 0,
    'show_toggle' => 1,
    'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'bold' => 1,
        'italic' => 1,
        'underline' => 1,
        'justifyleft' => 1,
        'justifycenter' => 1,
        'justifyright' => 1,
        'justifyfull' => 1,
        'bullist' => 1,
        'numlist' => 1,
        'undo' => 1,
        'redo' => 1,
        'forecolor' => 1,
        'backcolor' => 1,
        'blockquote' => 1,
      ),
      'advimage' => array(
        'advimage' => 1,
      ),
      'advlink' => array(
        'advlink' => 1,
      ),
      'drupal' => array(
        'media' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 1,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => 'theme',
    'css_path' => '',
    'css_classes' => '',
  );

  $fields = array(
    'format' => 'full_html',
    'editor' => 'tinymce',
    'settings' => serialize($settings_full),
  );

  db_insert('wysiwyg')->fields($fields)->execute();

  $settings_filtered = array(
    'default' => 1,
    'user_choose' => 0,
    'show_toggle' => 1,
    'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'bold' => 1,
        'italic' => 1,
        'underline' => 1,
        'bullist' => 1,
        'numlist' => 1,
        'undo' => 1,
        'redo' => 1,
        'link' => 1,
        'unlink' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 1,
    'apply_source_formatting' => 0,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => 'theme',
    'css_path' => '',
    'css_classes' => '',
  );

  $fields = array(
    'format' => 'filtered_html',
    'editor' => 'tinymce',
    'settings' => serialize($settings_filtered),
  );

  db_insert('wysiwyg')->fields($fields)->execute();

  db_update('filter_format')
    ->condition('format', 'filtered_html')
    ->fields(array('weight' => 1))
    ->execute();

  db_update('filter_format')
    ->condition('format', 'full_html')
    ->fields(array('weight' => 0))
    ->execute();
}

/**
 * Set Backup & Migrate config.
 */
function taz_set_backup_migrate() {
  // Set destination.
  $fields = array(
    'destination_id' => 'db4568d60b719eff0860897b7d5f344f',
    'name' => 'Dev Snapshot',
    'type' => 'file',
    'location' => 'private://backup_migrate/scheduled/snapshot',
    'settings' => serialize(array()),
  );

  db_insert('backup_migrate_destinations')->fields($fields)->execute();

  $filters = array(
    'compression' => 'gzip',
    'notify_success_enable' => 0,
    'notify_failure_enable' => 0,
    'utils_site_offline' => 0,
    'utils_site_offline_message' => 'Taz is currently under maintenance. We should be back shortly. Thank you for your patience.',
    'utils_description' => '',
    'destinations' => array(
      'db' => array(
        'exclude_tables' => array(),
        'nodata_tables' => array(
          'cache' => 'cache',
          'cache_admin_menu' => 'cache_admin_menu',
          'cache_block' => 'cache_block',
          'cache_bootstrap' => 'cache_bootstrap',
          'cache_field' => 'cache_field',
          'cache_filter' => 'cache_filter',
          'cache_form' => 'cache_form',
          'cache_image' => 'cache_image',
          'cache_l10n_update' => 'cache_l10n_update',
          'cache_media_xml' => 'cache_media_xml',
          'cache_menu' => 'cache_menu',
          'cache_page' => 'cache_page',
          'cache_path' => 'cache_path',
          'cache_token' => 'cache_token',
          'cache_update' => 'cache_update',
          'cache_views' => 'cache_views',
          'cache_views_data' => 'cache_views_data',
          'ctools_css_cache' => 'ctools_css_cache',
          'ctools_object_cache' => 'ctools_object_cache',
          'search_dataset' => 'search_dataset',
          'search_index' => 'search_index',
          'search_total' => 'search_total',
          'sessions' => 'sessions',
        ),
        'utils_lock_tables' => 0,
        'use_mysqldump' => 0,
      ),
    ),
  );

  // Set profiles.
  $fields = array(
    'profile_id' => '',
    'name' => 'Dev Snapshot',
    'filename' => '[site:name]',
    'append_timestamp' => '0',
    'timestamp_format' => 'Y-m-d\TH-i-s',
    'filters' => serialize($filters),
  );

  db_insert('backup_migrate_profiles')->fields($fields)->execute();

  $fields = array(
    'profile_id' => 'default',
    'name' => 'Default settings',
    'filename' => '[site:name]',
    'append_timestamp' => '1',
    'timestamp_format' => 'Y-m-d\TH-i-s',
    'filters' => serialize($filters),
  );

  db_update('backup_migrate_profiles')
    ->condition('profile_id', 'default')
    ->fields($fields)
    ->execute();

  // Set schedules.
  $fields = array(
    'schedule_id' => '5bd8bb83f92425d6fa282874dd7e3706',
    'name' => 'Daily Backup',
    'source_id' => 'db',
    'destination_id' => 'scheduled',
    'profile_id' => 'default',
    'keep' => 90,
    'period' => 28800,
    'enabled' => 1,
    'cron' => 1,
  );

  db_insert('backup_migrate_schedules')->fields($fields)->execute();

  $fields = array(
    'schedule_id' => '7b7474b0983cc65bc0ceab04e032a218',
    'name' => 'Dev Snapshot',
    'source_id' => 'db',
    'destination_id' => 'db4568d60b719eff0860897b7d5f344f',
    'profile_id' => 'c448b0b687b26069640579b972675991',
    'keep' => 7,
    'period' => 43200,
    'enabled' => 1,
    'cron' => 1,
  );

  db_insert('backup_migrate_schedules')->fields($fields)->execute();
}

/**
 * Setup default menu items.
 */
function taz_set_menu() {
  // Create menu item for "Home" in main menu
  $item = array(
    'link_path' => '<front>',
    'link_title' => 'Home',
    'menu_name' => 'main-menu',
    'weight' => -50,
  );
  menu_link_save($item);
  // Update menu router information.
  menu_rebuild();
}

/**
 * Setup default contexts.
 *
 * This is necessary because hook_context_default_contexts() doesn't get
 * invoked automatically when the installation profile is "installed".
 */
function taz_set_contexts() {
  include_once 'taz.context.inc';

  foreach (taz_context_default_contexts() as $context) {
    context_save($context);
  }
}